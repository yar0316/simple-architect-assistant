name: GitHub Release Distribution

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v1.2.3 などのタグがプッシュされた時に実行
  workflow_dispatch:  # 手動実行も可能
    inputs:
      version:
        description: 'リリースバージョン (例: v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-and-release:
    name: Build and Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完全な履歴を取得（リリースノート生成に必要）
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract version from tag or input
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # v prefix を削除
        VERSION_NUMBER=${VERSION#v}
        echo "version=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION_NUMBER}"
    
    - name: Build desktop application
      run: |
        python build_desktop_app.py --clean --version "${{ steps.version.outputs.version }}"
    
    - name: Create distribution archive
      run: |
        cd dist
        zip -r simple-architect-assistant-${{ steps.version.outputs.version }}.zip simple-architect-assistant/
        
        # ファイル情報を取得
        FILE_SIZE=$(stat -c%s "simple-architect-assistant-${{ steps.version.outputs.version }}.zip")
        FILE_SIZE_MB=$(echo "scale=1; $FILE_SIZE / 1024 / 1024" | bc)
        echo "archive_size=${FILE_SIZE_MB}MB" >> $GITHUB_ENV
        
        # SHA256ハッシュを計算
        SHA256=$(sha256sum "simple-architect-assistant-${{ steps.version.outputs.version }}.zip" | cut -d' ' -f1)
        echo "archive_sha256=${SHA256}" >> $GITHUB_ENV
        echo "SHA256: ${SHA256}"
    
    - name: Generate release notes
      id: release_notes
      run: |
        RELEASE_NOTES=$(cat <<EOF
        ## 🎉 Simple Architect Assistant ${{ steps.version.outputs.tag }}
        
        AWS Bedrock (Claude 4 Sonnet) とMCP統合によるAWSインフラ設計支援デスクトップアプリケーション
        
        ### 📦 配布情報
        - **ファイル名**: simple-architect-assistant-${{ steps.version.outputs.version }}.zip
        - **ファイルサイズ**: ${archive_size}
        - **SHA256**: \`${archive_sha256}\`
        - **ビルド日時**: $(date -u '+%Y-%m-%d %H:%M:%S') UTC
        
        ### 🚀 セットアップ手順
        1. ZIPファイルをダウンロード・解凍
        2. \`.streamlit/secrets.toml.example\` を \`.streamlit/secrets.toml\` にコピー
        3. AWS設定を編集（プロファイル・リージョン）
        4. \`simple-architect-assistant.exe\` を実行
        
        ### ⚙️ 設定ファイル
        - **AWS設定**: \`.streamlit/secrets.toml\` （必須）
        - **MCP設定**: \`config/mcp_config.json\` （オプション、新機能追加時）
        
        ### 🔧 システム要件
        - Windows 10以上 / macOS 10.15以上 / Linux (Ubuntu 18.04以上)
        - AWS CLI設定済み環境
        - インターネット接続（MCP機能利用時）
        
        ### 📋 主な機能
        - AWS構成提案チャット（Claude 4 Sonnet）
        - Terraformコード生成
        - MCP統合による拡張機能
        - リアルタイムコスト分析
        - フォールバック機能による高可用性
        
        ### 🐛 トラブルシューティング
        - **AWS認証エラー**: \`aws configure list\` で設定確認
        - **MCP接続エラー**: \`config/mcp_config.json\` で \`"disabled": true\` に設定可能
        - **起動が遅い**: 初回起動時は依存関係読み込みのため時間がかかります
        
        ### 📚 ドキュメント
        - [ビルドガイド](BUILD.md)
        - [配布ガイド](docs/DISTRIBUTION_GUIDE.md)
        - [デスクトップアプリガイド](docs/DESKTOP_APP_GUIDE.md)
        
        ### 🆘 サポート
        - Issues: https://github.com/yar0316/simple-architect-assistant/issues
        - ドキュメント: README.md
        
        ---
        
        ### ファイル整合性確認
        ダウンロード後、以下のコマンドでファイルの整合性を確認できます：
        \`\`\`bash
        # Windows (PowerShell)
        Get-FileHash simple-architect-assistant-${{ steps.version.outputs.version }}.zip -Algorithm SHA256
        
        # macOS/Linux
        sha256sum simple-architect-assistant-${{ steps.version.outputs.version }}.zip
        \`\`\`
        
        期待値: \`${archive_sha256}\`
        EOF
        )
        
        # 改行をエスケープしてGitHub Outputに設定
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: "Simple Architect Assistant ${{ steps.version.outputs.tag }}"
        body: ${{ steps.release_notes.outputs.notes }}
        files: |
          dist/simple-architect-assistant-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
        make_latest: true
        generate_release_notes: false  # カスタムリリースノートを使用
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: always()  # 失敗時でもアーティファクトをアップロード
      with:
        name: desktop-app-${{ steps.version.outputs.version }}
        path: |
          dist/
          !dist/dist_config/
        retention-days: 30
    
    - name: Report deployment summary
      run: |
        echo "## 🎉 GitHub Release作成完了" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 リリース情報" >> $GITHUB_STEP_SUMMARY
        echo "- **バージョン**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ファイル**: simple-architect-assistant-${{ steps.version.outputs.version }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- **サイズ**: ${archive_size}" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA256**: \`${archive_sha256}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 リンク" >> $GITHUB_STEP_SUMMARY
        echo "- [リリースページ](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "- [ダウンロード](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/simple-architect-assistant-${{ steps.version.outputs.version }}.zip)" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: build-and-release
    if: success()
    
    steps:
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
    
    - name: Create deployment notification
      run: |
        echo "✅ GitHub Release配布が正常に完了しました" 
        echo ""
        echo "📋 配布情報:"
        echo "- リポジトリ: ${{ github.repository }}"
        echo "- バージョン: ${{ steps.version.outputs.tag }}"
        echo "- リリースURL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        echo ""
        echo "🎯 次のステップ:"
        echo "1. リリースページでファイルのダウンロードを確認"
        echo "2. 必要に応じてリリースノートを編集"
        echo "3. ユーザーへの通知を実施"